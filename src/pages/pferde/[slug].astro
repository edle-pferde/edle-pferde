---
import { getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { IconCalendar, IconColorPicker, IconGenderFemale, IconGenderMale, IconHorseshoe, IconRuler } from "@tabler/icons-react";
import YoutubeEmbedVideo from "../../components/YoutubeEmbedVideo.astro";
import HorseRelationLink from "../../components/HorseRelationLink.astro";
import PhotoSwipe from "../../components/PhotoSwipe.astro";
import MiniHorseCard from "../../components/horses/MiniHorseCard.astro";

const { slug } = Astro.params;
if (!slug) throw new Error("Slug not found");
const horse = await getEntry("horses", slug);
if (!horse) throw new Error("No horse found for this slug");

const { Content } = await horse.render();

const allImages = [
  { ...horse.data.profile_picture, featured: true },
  ...horse.data.gallery
  || []
];

const horses = await reader.collections.horses.all();
let children = horses.filter(horse => horse.entry.mother.value === slug);
children = children.map(child => {
  return {
    ...child,
    data: child.entry
  };
});

// Generate static pages
export async function getStaticPaths() {
  const horses = await reader.collections.horses.all();
  return horses.map(horse => ({ params: { slug: horse.slug } }));
}
---
<Layout title={horse.data.full_name}>
  <div class="page-width mx-auto space-y-16 px-4 md:px-0">
    <div class="space-y-4">
      <div class="space-y-1">
        <h1 class="text-brand text-5xl font-semibold">
          {horse.data.full_name}
        </h1>
        <div>
          {horse.data.family}
        </div>
        <div class="italic">
          {horse.data.current_owner}
        </div>
      </div>
      <div class="flex flex-wrap gap-x-6 gap-y-2">
        {horse.data.birth_year && (
          <div class="flex items-center space-x-2">
            <IconCalendar className="text-brand size-4" />
            <div class="font-semibold text-brand">
              {horse.data.birth_year}{horse.data.lived_until && (", " + horse.data.lived_until + " verstorben")}
            </div>
          </div>
        )}
        {horse.data.breed && (
          <div class="flex items-center space-x-2">
            <IconHorseshoe className="text-brand size-4" />
            <div class="font-semibold text-brand">
              {horse.data.breed}
            </div>
          </div>
        )}
        {horse.data.gender && (
          <div class="flex items-center space-x-2">
            {horse.data.gender === "Stute" && (
              <IconGenderFemale className="text-brand size-4" />
            )}
            {horse.data.gender !== "Stute" && (
              <IconGenderMale className="text-brand size-4" />
            )}
            <div class="font-semibold text-brand">
              {horse.data.gender}
            </div>
          </div>
        )}
        {horse.data.size && (
          <div class="flex items-center space-x-2">
            <IconRuler className="text-brand size-4" />
            <div class="font-semibold text-brand">
              {horse.data.size}
            </div>
          </div>
        )}
        {horse.data.color && (
          <div class="flex items-center space-x-2">
            <IconColorPicker className="text-brand size-4" />
            <div class="font-semibold text-brand">
              {horse.data.color}
            </div>
          </div>
        )}
      </div>
    </div>
    <PhotoSwipe
      images={allImages}
      firstPhotoCropPosition={horse.data.profile_picture_crop_position}
    />
    <p>
      {horse.data.bio}
    </p>
    <div class="max-w-[640px] mx-auto">
      {horse.data.youtube_video_id && (
        <YoutubeEmbedVideo
          youtubeVideoId={horse.data.youtube_video_id}
          width="100%"
          height="360"
        />
      )}
    </div>
    {horse.data.father?.value && horse.data.mother?.value && (
      <div class="space-y-4">
        <h2>
          Stammbaum
        </h2>

        <table class="bg-white table-fixed w-full border-collapse *:*:h-20">
          <tr>
            <td rowspan="4" class="border border-brand/25 text-center text-brand">
              <span>{horse.data.full_name}</span>
            </td>
            <td rowspan="2" class="border border-brand/25 text-center text-brand">
              <HorseRelationLink horseName={horse.data.father} />
            </td>
            <td class="border border-brand/25 text-center text-brand">
              <HorseRelationLink horseName={horse.data.fathers_father} />
            </td>
          </tr>
          <tr>
            <td class="border border-brand/25 text-center text-brand">
              <HorseRelationLink horseName={horse.data.fathers_mother} />
            </td>
          </tr>
          <tr>
            <td rowspan="2" class="border border-brand/25 text-center text-brand">
              <HorseRelationLink horseName={horse.data.mother} />
            </td>
            <td class="border border-brand/25 text-center text-brand">
              <HorseRelationLink horseName={horse.data.mothers_father} />
            </td>
          </tr>
          <tr>
            <td class="border border-brand/25 text-center text-brand">
              <HorseRelationLink horseName={horse.data.mothers_mother} />
            </td>
          </tr>
        </table>

      </div>
    )}

    {horse.body && (
      <div class="space-y-4">
        <h2>
          Erfolge
        </h2>
        <div class="prose">
          <Content />
        </div>
      </div>
    )}

    {children.length > 0 && (
      <div class="space-y-4">
        <h2>
          Nachkommen
        </h2>
        <div class="grid md:grid-cols-4 grid-cols-2 gap-4">
          {children?.map(horse => (
            <MiniHorseCard horseSlug={horse.slug} />
          ))}
        </div>
      </div>
    )}
  </div>
</Layout>

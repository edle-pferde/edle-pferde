---
import Image from "astro/components/Image.astro";
const { article } = Astro.props;

let cropPosition = "";
switch (article.data.cover_image_crop_position) {
  case "top-left":
    cropPosition = "object-top-left";
    break;
  case "top":
    cropPosition = "object-top";
    break;
  case "top-right":
    cropPosition = "object-top-right";
    break;
  case "left":
    cropPosition = "object-left";
    break;
  case "right":
    cropPosition = "object-right";
    break;
  case "bottom-left":
    cropPosition = "object-bottom-left";
    break;
  case "bottom":
    cropPosition = "object-bottom";
    break;
  case "bottom-right":
    cropPosition = "object-bottom-right";
    break;
  case "center":
  default:
    cropPosition = "object-center";
    break;
}

function formatDate(date: Date) {
  return new Intl.DateTimeFormat("de-AT", {
    year: "numeric",
    month: "long",
    day: "numeric"
  }).format(date);
}
---
<a href={`/news/${article.slug}`} class="box transition hover:brightness-110">
  <div class="flex flex-col md:flex-row rounded bg-white overflow-auto shadow">
    <Image
      src={article.data.cover_image}
      alt={`${article.slug}`}
      height={768}
      width={1024}
      loading="eager"
      class={`aspect-4/3 w-full md:w-72 object-cover ${cropPosition}`}
      transition:name={`article-${article.slug}`}
    />
    <div class="px-8 py-4 flex flex-col justify-between">
      <div class="space-y-2">
        <div class="font-semibold text-xl line-clamp-2">{article.data.title}</div>
        <p class="line-clamp-3">{article.body}</p>
      </div>
      <time class="text-sm mt-4">{formatDate(new Date(article.data.created_at))}</time>
    </div>
  </div>
</a>

<script type="module">
  import { animate, press } from 'motion'

  const gestureState = new WeakMap()

  const transition = { type: "spring", stiffness: 500, damping: 25 }

  const initialState = {
    isPressed: false,
  }

  function setGesture(element, update) {
    const state = gestureState.get(element) || { ...initialState }
    const newState = { ...state, ...update }
    gestureState.set(element, newState)

    let scale = 1
    if (newState.isPressed) {
      scale = 0.95
    }

    animate(element, { scale }, transition)
  }

  press(".box", (element) => {
    setGesture(element, { isPressed: true })
    return () => setGesture(element, { isPressed: false })
  })
</script>

<style>
  .box {
    background-color: #dd00ee;
    border-radius: 10px;
    cursor: pointer;
  }

  .box:focus-visible {
    outline: 2px solid #8df0cc;
    outline-offset: 2px;
  }
</style>
